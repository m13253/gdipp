import "wtypes.idl";

[
uuid(DA2AAF70-7FD7-4D0D-979F-2056463C310A),
version(1.0)
]

interface gdipp_rpc
{
	typedef struct gdipp_rpc_bitmap_glyph
	{
		int left;
		int top;
		int rows;
		int width;
		int pitch;
		[size_is(rows * (pitch >= 0 ? pitch : -pitch))] byte *buffer;
	} gdipp_rpc_bitmap_glyph;

	typedef struct gdipp_rpc_outline_glyph
	{
		short n_contours;
		short n_points;
		[size_is(n_points)] POINT *points;
		[size_is(n_points)] char *tags;
		[size_is(n_contours)] char *contours;
	} gdipp_rpc_outline_glyph;

	typedef struct gdipp_rpc_bitmap_glyph_run
	{
		UINT count;
		[size_is(count)] gdipp_rpc_bitmap_glyph *glyphs;
		[size_is(count)] RECT *ctrl_boxes;
		[size_is(count)] RECT *black_boxes;
		int render_mode;
	} gdipp_rpc_bitmap_glyph_run;

	typedef struct gdipp_rpc_outline_glyph_run
	{
		UINT count;
		[size_is(count)] gdipp_rpc_outline_glyph *glyphs;
		[size_is(count)] RECT *ctrl_boxes;
		[size_is(count)] RECT *black_boxes;
		int render_mode;
	} gdipp_rpc_outline_glyph_run;

	typedef [context_handle] void *GDIPP_RPC_SESSION_HANDLE;

	error_status_t gdipp_rpc_begin_session([in] handle_t h_gdipp_rpc, [in, size_is(logfont_size)] const byte *logfont_buf, [in] unsigned long logfont_size, [in] unsigned short bits_per_pixel, [out] GDIPP_RPC_SESSION_HANDLE *h_session);
	error_status_t gdipp_rpc_get_font_size([in] handle_t h_gdipp_rpc, [in] GDIPP_RPC_SESSION_HANDLE h_session, [in] unsigned long table, [in] unsigned long offset, [out] unsigned long *font_size);
	error_status_t gdipp_rpc_get_font_data([in] handle_t h_gdipp_rpc, [in] GDIPP_RPC_SESSION_HANDLE h_session, [in] unsigned long table, [in] unsigned long offset, [out, size_is(buf_size)] byte *data_buf, [in] unsigned long buf_size);
	error_status_t gdipp_rpc_get_font_metrics_size([in] handle_t h_gdipp_rpc, [in] GDIPP_RPC_SESSION_HANDLE h_session, [out] unsigned long *metrics_size);
	error_status_t gdipp_rpc_get_font_metrics_data([in] handle_t h_gdipp_rpc, [in] GDIPP_RPC_SESSION_HANDLE h_session, [out, size_is(buf_size)] byte *metrics_buf, [in] unsigned long buf_size);
	error_status_t gdipp_rpc_get_glyph_indices([in] handle_t h_gdipp_rpc, [in] GDIPP_RPC_SESSION_HANDLE h_session, [in, string, size_is(count * sizeof(wchar_t))] const wchar_t *str, [in] int count, [out, size_is(count * sizeof(unsigned short))] unsigned short *gi);
	//error_status_t gdipp_rpc_get_render_config([in] handle_t h_gdipp_rpc, [in, string] const wchar_t *name, [out, string, retval] wchar_t **value);
	//error_status_t gdipp_rpc_set_render_config([in] handle_t h_gdipp_rpc, [in, size_is(delta_size * sizeof(wchar_t))] const wchar_t *config_delta, [in] unsigned long delta_size);
	error_status_t gdipp_rpc_make_bitmap_glyph_run([in] handle_t h_gdipp_rpc, [in] GDIPP_RPC_SESSION_HANDLE h_session, [in, string] const wchar_t *string, [in] unsigned int count, [in] boolean is_glyph_index, [out] gdipp_rpc_bitmap_glyph_run *glyph_run_ptr);
	error_status_t gdipp_rpc_make_outline_glyph_run([in] handle_t h_gdipp_rpc, [in] GDIPP_RPC_SESSION_HANDLE h_session, [in, string] const wchar_t *string, [in] unsigned int count, [in] boolean is_glyph_index, [out] gdipp_rpc_outline_glyph_run *glyph_run_ptr);
	error_status_t gdipp_rpc_end_session([in] handle_t h_gdipp_rpc, [in, out] GDIPP_RPC_SESSION_HANDLE *h_session);
}

